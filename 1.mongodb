db.createCollection('products',{
  validator: {
    $jsonSchema: {
      bsonType: 'object',
      required: ['name', 'price'],
      properties: {
        name: {
          bsonType: 'string'
        },
        price: {
          bsonType: 'string'
        },
        amount: {
          bsonType: 'int'
        },
        expiredDate: {
          bsonType: 'date'
        }
      }
    }
  }
})
db.createCollection('manufactures',{
    validator: {
        $jsonSchema: {
            bsonType: 'object',
            required: ['name'],
            properties: {
                name: {
                    bsonType: 'string'
                },
                address: {
                    bsonType: 'object',
                    required: ['country', 'city'],
                    properties: {
                        country: {
                            bsonType: 'string'
                        },
                        city: {
                            bsonType: 'string'
                        }
                    }
                }
            }
        }
    }
})
 db.createCollection('students',{
    validator: {
        $jsonSchema: {
            bsonType: 'object',
            required: ['firstName', 'lastName', 'course', 'groupId'],
            properties: {
                firstName: {
                    bsonType: 'string'
                },
                lastName: {
                    bsonType: 'string'
                },
                course: {
                    bsonType: 'int'
                },
                groupId: {
                    bsonType: 'objectId'
                }
            }
        }
    }
 })

 db.createCollection('groups',{
    validator: {
        $jsonSchema: {
            bsonType: 'object',
            required: ['name', 'facultet', 'teacher'],
            properties: {
                name: {
                    bsonType: 'string'
                },
                facultet: {
                    bsonType: 'string'
                },
                teacher: {
                    bsonType: 'string'
                }
            }
        }
    }
 })

 db.groups.insertOne({
    name: 'second',
    facultet: 'fn',
    teacher: 'Vadim Mykhailovich'
 })

 db.students.insertOne({
    firstName: 'Mike',
    lastName: 'Johnson',
    course: 1,
    groupId: new ObjectId('648398f9426c2fa094484881')
 })
  db.students.insertOne({
    firstName: 'Lee',
    lastName: 'Rachmunson',
    course: 1,
    groupId: new ObjectId('6483991d426c2fa094484882')
 })

 db.students.aggregate([
    {
        /**
         * from: The target collection.
         * localField: The local join field.
         * foreignField: The target join field.
         * as: The name for the results.
         * pipeline: Optional pipeline to run on the foreign collection.
         * let: Optional variables to use in the pipeline field stages.
         */
        $lookup: {
          from: 'groups',
          localField: 'groupId',
          foreignField: '_id',
          as: 'group'
        }
    },
    {
        /**
         * path: Path to the array field.
         * includeArrayIndex: Optional name for index.
         * preserveNullAndEmptyArrays: Optional
         *   toggle to unwind null and empty values.
         */
        $unwind: {
          path: '$group'
        }
    },
    {
        /**
         * Provide the field name to exclude.
         * To exclude multiple fields, pass the field names in an array.
         */
        $unset: 'groupId'
    },
    {
        /**
         * _id: The id of the group.
         * fieldN: The first field name.
         */
        $group: {
          _id: '$group.name',
          countStudentsInGroup: {
            /**
             * Provide the field name for the count.
             */
            $count: {}
          }
        }
    }
 ])